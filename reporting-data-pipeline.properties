#
# These settings are in use when unit tests are run
#
# You can change your server port like this:
# server.port=8082

# You can disable authentication requirements like this (development purposes only)
app.server.disableAuth=false

# These lines tell the application about the OAuth server
app.server.trustedJwtIssuers=https://*.americanwell.com/**
app.server.certJwtUri=https://keycloak.dev.americanwell.com/auth/realms/dev-realm/protocol/openid-connect/certs
app.server.openIdConfigUri=https://keycloak.dev.americanwell.com/auth/realms/dev-realm/.well-known/openid-configuration

# These lines tell the application about the OAuth client
app.client.authUri=https://keycloak.dev.americanwell.com/auth/realms/dev-realm/protocol/openid-connect/auth
app.client.tokenUri=https://keycloak.dev.americanwell.com/auth/realms/dev-realm/protocol/openid-connect/token
app.client.secret=6cfdc087-f841-4a4a-99a7-65554af9c5e0
app.client.id=test-confidential-client
app.client.auth.name = soa-test-authentication
app.client.auth.scope = read, read all, write,write all,trust,trust all,openid,openid,profile,profile 

# To debug authentication / authorization issues, you might add:
# logging.level.org.springframework.security=DEBUG

#
# You can put database configuration here that is appropriate for running unit tests
# Typically that would ONLY be an in-memory database, because you don't want to rely
# on an external database for running unit tests.
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=false prevents
# hibernate from trying to retrieve some meta information from the database which is 
# not necessary for the in memory database
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=false
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:db
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=false
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Redis docker start command:
# docker run --name some-redis2 -p 6379:6379 -d redis
spring.redis.password=
spring.redis.host=localhost
spring.redis.port=6479
#spring.redis.sentinel.master=mymaster #name of redis server
#spring.redis.sentinel.nodes=127.0.0.1:26379,127.0.0.1:26380 #deliminated list of sentinels.

# Event Settings
soa.event.redis.host=localhost
soa.event.redis.port=6479

#AWS configuration. Remove to use default Credential chain
amazon.aws.accesskey=accessKey
amazon.aws.secretkey=secretKey
amazon.aws.region=us-east-2

#DynamoDB configuration. Remove to use "real" non-local DynamoDB
amazon.dynamodb.endpoint=http://localhost:8000/

#Create DynamoDB tables on startup of the application
#This feature is not recommended for production where hosting will likely
#want more control over table creations, so keep in `-dev.properties`.
spring.data.dynamodb.entity2ddl.auto=create-only

#Application configuration fields
sample.hello.text=Hello

